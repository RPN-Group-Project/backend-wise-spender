// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id                  String    @id @default(uuid())
  name                String
  email               String?    @unique
  password            String    
  createdAt           DateTime  @default(now())
  updateAt            DateTime  @updatedAt
  isEmailVerified     Boolean @default(false)
  expense_limit       Int

  tokens              Token[]
  category            Category[]
  expenses            Expenses[]
  monthlySummaries    MonthlySummary[]
}
model Token {
  id        String    @id @default(uuid())
  token     String    @db.VarChar(400)
  user_id   String    
  User      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  type      String
  expires   DateTime
  blacklisted Boolean @default(false)
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
}

model Category {
  id            String    @id @default(uuid())
  user_id       String
  name          String
  monthly_budget Int
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  User          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  expenses     Expenses[]
}

model Expenses {
  id            String    @id @default(uuid())
  user_id       String
  category_id   String
  amount        Int
  description   String
  date          DateTime
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  User          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Category      Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)
}

model MonthlySummary {
  id                String    @id @default(uuid())
  user_id           String
  month             DateTime
  total_spent       Int
  remaining_budget  Int
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  User              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}